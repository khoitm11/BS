# app/dashboard/main_dashboard.py
import streamlit as st
import pandas as pd
import sys
import os
import time  # ƒê·ªÉ x·ª≠ l√Ω logic l√†m m·ªõi

# Th√™m th∆∞ m·ª•c g·ªëc v√†o sys.path
current_dir = os.path.dirname(os.path.abspath(__file__))
project_root = os.path.dirname(os.path.dirname(current_dir))
if project_root not in sys.path:
    sys.path.insert(0, project_root)

from core.black_scholes import get_all_greeks, european_call_price, european_put_price
from data_fetcher.live_data import (
    get_current_price_and_change,
    calculate_historical_volatility_annualized,
)

st.set_page_config(layout="wide", page_title="Black-Scholes Lab", page_icon="üî¨")

# Kh·ªüi t·∫°o session state n·∫øu ch∆∞a c√≥
SESSION_DEFAULTS = {
    "ticker_symbol": "AAPL",
    "current_S_market": 150.0,  # Gi√° tr·ªã m·∫∑c ƒë·ªãnh ban ƒë·∫ßu
    "price_change": None,
    "price_pct_change": None,
    "hv20_market": 0.20,  # HV 20 ng√†y
    "hv60_market": 0.22,  # HV 60 ng√†y
    "last_fetch_timestamp": 0,
    "S_input_val": 150.0,
    "sigma_input_val": 0.20,
    "K_input_val": 150.0,
    "T_days_input_val": 30,
    "r_percent_input_val": 5.0,
}
for key, value in SESSION_DEFAULTS.items():
    if key not in st.session_state:
        st.session_state[key] = value


# --- LOGIC L·∫§Y D·ªÆ LI·ªÜU TH·ªä TR∆Ø·ªúNG ---
def fetch_market_data(ticker: str):
    st.session_state.last_fetch_timestamp = time.time()
    price_data = get_current_price_and_change(ticker)
    hv20_data = calculate_historical_volatility_annualized(ticker, hv_window_days=20)
    # hv60_data = calculate_historical_volatility_annualized(ticker, hv_window_days=60) # C√≥ th·ªÉ th√™m n·∫øu mu·ªën

    if price_data and price_data[0] is not None:
        st.session_state.current_S_market = price_data[0]
        st.session_state.price_change = price_data[1]
        st.session_state.price_pct_change = price_data[2]
        st.session_state.S_input_val = price_data[0]  # T·ª± ƒë·ªông c·∫≠p nh·∫≠t √¥ input S
    else:
        st.sidebar.warning(f"Kh√¥ng l·∫•y ƒë∆∞·ª£c gi√° cho {ticker}.")

    if hv20_data is not None:
        st.session_state.hv20_market = hv20_data
        st.session_state.sigma_input_val = hv20_data  # T·ª± ƒë·ªông c·∫≠p nh·∫≠t √¥ input sigma
    else:
        st.sidebar.warning(f"Kh√¥ng t√≠nh ƒë∆∞·ª£c HV20 cho {ticker}.")


# --- SIDEBAR ---
st.sidebar.title("Thi·∫øt l·∫≠p Th√¥ng s·ªë")
st.session_state.ticker_symbol = st.sidebar.text_input(
    "M√£ C·ªï phi·∫øu", value=st.session_state.ticker_symbol
).upper()

if st.sidebar.button(
    "T·∫£i D·ªØ li·ªáu cho " + st.session_state.ticker_symbol, key="fetch_button"
):
    with st.spinner(f"ƒêang t·∫£i d·ªØ li·ªáu cho {st.session_state.ticker_symbol}..."):
        fetch_market_data(st.session_state.ticker_symbol)
    st.rerun()  # Ch·∫°y l·∫°i to√†n b·ªô script ƒë·ªÉ c·∫≠p nh·∫≠t UI

st.sidebar.markdown("---")
st.sidebar.subheader("Gi√° tr·ªã Th·ªã tr∆∞·ªùng (G·ª£i √Ω)")
price_display = "{:.2f}".format(st.session_state.current_S_market)
if (
    st.session_state.price_change is not None
    and st.session_state.price_pct_change is not None
):
    change_sign = "+" if st.session_state.price_change >= 0 else ""
    price_display += (
        " ("
        + change_sign
        + "{:.2f}".format(st.session_state.price_change)
        + ", "
        + change_sign
        + "{:.2f}".format(st.session_state.price_pct_change)
        + "%)"
    )
st.sidebar.markdown(f"**Gi√° hi·ªán t·∫°i (S):** {price_display}")
st.sidebar.markdown(f"**HV20 (œÉ g·ª£i √Ω):** {st.session_state.hv20_market * 100:.2f}%")
st.sidebar.markdown("---")

st.sidebar.subheader("Tham s·ªë T√≠nh to√°n Black-Scholes")
s_ui = st.sidebar.number_input(
    "Gi√° T√†i s·∫£n (S)",
    value=float(st.session_state.S_input_val),
    step=0.01,
    format="%.2f",
)
k_ui = st.sidebar.number_input(
    "Gi√° Th·ª±c hi·ªán (K)",
    value=float(st.session_state.get("K_input_val", s_ui)),
    step=0.50,
    format="%.2f",
)
t_days_ui = st.sidebar.number_input(
    "Th·ªùi gian ƒê√°o h·∫°n (ng√†y)",
    min_value=1,
    value=int(st.session_state.T_days_input_val),
    step=1,
)
r_percent_ui = st.sidebar.slider(
    "L√£i su·∫•t Phi R·ªßi ro (r %)",
    0.0,
    15.0,
    float(st.session_state.r_percent_input_val),
    0.1,
)
sigma_ui = st.sidebar.slider(
    "ƒê·ªô Bi·∫øn ƒë·ªông H√†ng nƒÉm (œÉ)",
    0.0001,
    2.0,
    float(st.session_state.sigma_input_val),
    0.001,
    format="%.4f",
)
days_for_theta_ui = st.sidebar.selectbox(
    "S·ªë ng√†y trong nƒÉm cho Theta",
    [365, 252],
    index=0 if st.session_state.get("days_theta_val", 365) == 365 else 1,
)

# L∆∞u l·∫°i gi√° tr·ªã input cu·ªëi c√πng v√†o session state ƒë·ªÉ nh·ªõ gi·ªØa c√°c l·∫ßn rerun do widget t∆∞∆°ng t√°c
st.session_state.S_input_val = s_ui
st.session_state.K_input_val = k_ui
st.session_state.T_days_input_val = t_days_ui
st.session_state.r_percent_input_val = r_percent_ui
st.session_state.sigma_input_val = sigma_ui
st.session_state.days_theta_val = days_for_theta_ui

# --- MAIN PANEL ---
st.title("·ª®ng d·ª•ng T√≠nh to√°n Black-Scholes & Greeks")

t_years_ui = t_days_ui / float(days_for_theta_ui)  # S·ª≠ d·ª•ng s·ªë ng√†y ng∆∞·ªùi d√πng ch·ªçn
r_annual_ui = r_percent_ui / 100.0

# T√≠nh to√°n v√† hi·ªÉn th·ªã gi√°
st.header("Gi√° Quy·ªÅn ch·ªçn")
call_p = european_call_price(s_ui, k_ui, t_years_ui, r_annual_ui, sigma_ui)
put_p = european_put_price(s_ui, k_ui, t_years_ui, r_annual_ui, sigma_ui)
col_call, col_put = st.columns(2)
col_call.metric("Gi√° Call", "{:.4f}".format(call_p))
col_put.metric("Gi√° Put", "{:.4f}".format(put_p))

# T√≠nh to√°n v√† hi·ªÉn th·ªã Greeks
st.header("Ph√¢n t√≠ch ƒê·ªô nh·∫°y (Greeks)")
greeks_c = get_all_greeks(
    s_ui, k_ui, t_years_ui, r_annual_ui, sigma_ui, "call", days_for_theta_ui
)
greeks_p = get_all_greeks(
    s_ui, k_ui, t_years_ui, r_annual_ui, sigma_ui, "put", days_for_theta_ui
)

greeks_df_data = {
    "Call Option": ["{:.4f}".format(v) for v in greeks_c.values()],
    "Put Option": ["{:.4f}".format(v) for v in greeks_p.values()],
}
greeks_df_index = [name.capitalize() for name in greeks_c.keys()]
greeks_df = pd.DataFrame(greeks_df_data, index=greeks_df_index)
st.table(greeks_df)

st.caption(
    """
    - Vega: Thay ƒë·ªïi gi√° / 1% thay ƒë·ªïi œÉ.
    - Theta: Thay ƒë·ªïi gi√° / 1 ng√†y.
    - Rho: Thay ƒë·ªïi gi√° / 1% thay ƒë·ªïi r.
"""
)
